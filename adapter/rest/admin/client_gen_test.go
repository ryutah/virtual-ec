// Package admin_test provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package admin_test

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Error defines model for Error.
type Error struct {
	Details *[]string `json:"details,omitempty"`
	Message string    `json:"message"`
}

// Product defines model for Product.
type Product struct {
	Id    int64  `json:"id"`
	Name  string `json:"name"`
	Price int64  `json:"price"`
}

// NotFound defines model for NotFound.
type NotFound Error

// ProductCreateSuccess defines model for ProductCreateSuccess.
type ProductCreateSuccess Product

// ProductGetSuccess defines model for ProductGetSuccess.
type ProductGetSuccess Product

// ProductSearchSuccess defines model for ProductSearchSuccess.
type ProductSearchSuccess struct {
	Products []Product `json:"products"`
}

// ServerError defines model for ServerError.
type ServerError Error

// ProductCreate defines model for ProductCreate.
type ProductCreate Product

// ProductSearchParams defines parameters for ProductSearch.
type ProductSearchParams struct {

	// Product名の前方一致検索をする
	Name *string `json:"name,omitempty"`
}

// ProductCreateRequestBody defines body for ProductCreate for application/json ContentType.
type ProductCreateJSONRequestBody ProductCreate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ProductSearch request
	ProductSearch(ctx context.Context, params *ProductSearchParams) (*http.Response, error)

	// ProductCreate request  with any body
	ProductCreateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	ProductCreate(ctx context.Context, body ProductCreateJSONRequestBody) (*http.Response, error)

	// ProductGet request
	ProductGet(ctx context.Context, productId int64) (*http.Response, error)
}

func (c *Client) ProductSearch(ctx context.Context, params *ProductSearchParams) (*http.Response, error) {
	req, err := NewProductSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ProductCreateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewProductCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ProductCreate(ctx context.Context, body ProductCreateJSONRequestBody) (*http.Response, error) {
	req, err := NewProductCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGet(ctx context.Context, productId int64) (*http.Response, error) {
	req, err := NewProductGetRequest(c.Server, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewProductSearchRequest generates requests for ProductSearch
func NewProductSearchRequest(server string, params *ProductSearchParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/products")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductCreateRequest calls the generic ProductCreate builder with application/json body
func NewProductCreateRequest(server string, body ProductCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductCreateRequestWithBody generates requests for ProductCreate with any type of body
func NewProductCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/products")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewProductGetRequest generates requests for ProductGet
func NewProductGetRequest(server string, productId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "product_id", productId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/products/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ProductSearch request
	ProductSearchWithResponse(ctx context.Context, params *ProductSearchParams) (*ProductSearchResponse, error)

	// ProductCreate request  with any body
	ProductCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ProductCreateResponse, error)

	ProductCreateWithResponse(ctx context.Context, body ProductCreateJSONRequestBody) (*ProductCreateResponse, error)

	// ProductGet request
	ProductGetWithResponse(ctx context.Context, productId int64) (*ProductGetResponse, error)
}

type ProductSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Products []Product `json:"products"`
	}
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ProductSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Product
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ProductCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ProductGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ProductSearchWithResponse request returning *ProductSearchResponse
func (c *ClientWithResponses) ProductSearchWithResponse(ctx context.Context, params *ProductSearchParams) (*ProductSearchResponse, error) {
	rsp, err := c.ProductSearch(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseProductSearchResponse(rsp)
}

// ProductCreateWithBodyWithResponse request with arbitrary body returning *ProductCreateResponse
func (c *ClientWithResponses) ProductCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ProductCreateResponse, error) {
	rsp, err := c.ProductCreateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseProductCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductCreateWithResponse(ctx context.Context, body ProductCreateJSONRequestBody) (*ProductCreateResponse, error) {
	rsp, err := c.ProductCreate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseProductCreateResponse(rsp)
}

// ProductGetWithResponse request returning *ProductGetResponse
func (c *ClientWithResponses) ProductGetWithResponse(ctx context.Context, productId int64) (*ProductGetResponse, error) {
	rsp, err := c.ProductGet(ctx, productId)
	if err != nil {
		return nil, err
	}
	return ParseProductGetResponse(rsp)
}

// ParseProductSearchResponse parses an HTTP response from a ProductSearchWithResponse call
func ParseProductSearchResponse(rsp *http.Response) (*ProductSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProductSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Products []Product `json:"products"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseProductCreateResponse parses an HTTP response from a ProductCreateWithResponse call
func ParseProductCreateResponse(rsp *http.Response) (*ProductCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProductCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseProductGetResponse parses an HTTP response from a ProductGetWithResponse call
func ParseProductGetResponse(rsp *http.Response) (*ProductGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProductGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
