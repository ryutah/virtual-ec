// Package internal provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package internal

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /products)
	ProductSearch(w http.ResponseWriter, r *http.Request, params ProductSearchParams)

	// (GET /products/{product_id})
	ProductGet(w http.ResponseWriter, r *http.Request, productId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ProductSearch operation middleware
func (siw *ServerInterfaceWrapper) ProductSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductSearchParams

	// ------------- Optional query parameter "name" -------------
	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.ProductSearch(w, r.WithContext(ctx), params)
}

// ProductGet operation middleware
func (siw *ServerInterfaceWrapper) ProductGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId int64

	err = runtime.BindStyledParameter("simple", false, "product_id", chi.URLParam(r, "product_id"), &productId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter product_id: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.ProductGet(w, r.WithContext(ctx), productId)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/products", wrapper.ProductSearch)
	})
	r.Group(func(r chi.Router) {
		r.Get("/products/{product_id}", wrapper.ProductGet)
	})

	return r
}
